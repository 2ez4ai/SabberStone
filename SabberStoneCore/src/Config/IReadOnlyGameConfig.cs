using SabberStoneCore.Enums;
using SabberStoneCore.Model;
using System.Collections.Generic;

namespace SabberStoneCore.Config
{
	/// <summary>
	/// Holds all configuration values to create a new <see cref="Game"/> instance.
	/// </summary>
	public interface IReadOnlyGameConfig
    {
		/// <summary>Gets or sets the index of the starting player.
		/// This value is 1-indexed, where 1 indicates <see cref="Player1Name"/> will start.
		/// </summary>
		/// <value>The starting player index.</value>
		int StartPlayerIdx { get; }

		/// <summary>Gets or sets the name of the player with index 1.</summary>
		/// <value>The name of the player.</value>
		string Player1Name { get; }

		/// <summary>Gets or sets the name of the player with index 2.</summary>
		/// <value>The name of the player.</value>
		string Player2Name { get; set; } 

		/// <summary>Gets or sets the card class of the player with index 1.</summary>
		/// <value><see cref="ECardClass"/></value>
		ECardClass Player1CardClass { get; set; } 

		/// <summary>Gets or sets the card class of the player with index 2.</summary>
		/// <value><see cref="ECardClass"/></value>
		ECardClass Player2CardClass { get; set; }

		/// <summary>Gets or sets the deck of the player with index 1.</summary>
		/// <value><see cref="ISet{Card}"/></value>
		IReadOnlyList<Card> Player1Deck { get; set; } 

		/// <summary>Gets or sets the deck of the player with index 2.</summary>
		/// <value><see cref="ISet{Card}"/></value>
		/// <autogeneratedoc />
		IReadOnlyList<Card> Player2Deck { get; set; }

		/// <summary>Gets or sets the format of the game.
		/// This value influences the game rules, see <see cref="EFormatType"/>
		/// for more information.
		/// </summary>
		/// <value><see cref="EFormatType"/></value>
		EFormatType FormatType { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether <see cref="Game"/> should setup
		/// the default heroes and heropower when starting the game.
		/// The chosen heroes are dependant on <see cref="Player1CardClass"/> and 
		/// <see cref="Player2CardClass"/>.
		/// </summary>
		/// <value><c>true</c> if creating default heroes is required; otherwise, <c>false</c>.</value>
		bool SetupHeroes { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether the game should autofill the
		/// decks of all players.
		/// This option can be used in conjunction with <see cref="Player1Deck"/> and <see cref="Player2Deck"/>
		/// since it will only add cards until the deck limit is reached.
		/// </summary>
		/// <value><c>true</c> if decks need to be filled; otherwise, <c>false</c>.</value>
		bool FillDecks { get; set; }

		/// <summary>Gets or sets a value indicating whether the <see cref="Game"/> should shuffle
		/// all decks before starting.</summary>
		/// <value><c>true</c> if shuffling is needed; otherwise, <c>false</c>.</value>
		bool Shuffle { get; set; }

		/// <summary>Gets or sets a value indicating whether <see cref="Game"/> must split itself
		/// when random events occur. Enabling this feature will reduce performance!
		/// </summary>
		/// <value><c>true</c> if splitting is necessary; otherwise, <c>false</c>.</value>
		/// <autogeneratedoc />
		bool Splitting { get; set; }

		/// <summary>Gets or sets a value indicating whether <see cref="Game"/> should store log entries.</summary>
		/// <value><c>true</c> if logging is required; otherwise, <c>false</c>.</value>
		bool Logging { get; set; }

		/// <summary>Gets or sets a value indicating whether <see cref="Game"/> should store POWER history
		/// entries.</summary>
		/// <value><c>true</c> if POWER history building is required; otherwise, <c>false</c>.</value>
		bool History { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether <see cref="Game"/> should skip the Mulligan phase.
		/// </summary>
		/// <value><c>true</c> if Mulligan must be skipped; otherwise, <c>false</c>.</value>
		bool SkipMulligan { get; set; } 

		/// <summary>Gets or sets the maximum amount minions that can reside within 
		/// the <see cref="EZone.PLAY"/> <see cref="IZone"/>.
		/// </summary>
		/// <value>The maximum amount of minions on board.</value>
		int MaxMinionsOnBoard { get; set; }

		/// <summary>Clones this instance.</summary>
		/// <returns></returns>
		/// <autogeneratedoc />
		IReadOnlyGameConfig Clone();
	}
}
