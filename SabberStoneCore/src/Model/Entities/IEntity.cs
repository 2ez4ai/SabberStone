using SabberStoneCore.Enchants;
using SabberStoneCore.Enums;
using SabberStoneCore.Model.Zones;
using System;
using System.Collections.Generic;

namespace SabberStoneCore.Model.Entities
{
	/// <summary>
	/// Exposes the properties for each implementing type of entity.
	/// Every object that consists of a set of <see cref="Tag"/>s describing
	/// that object is an entity. Next to existing it's also possible for an entity
	/// to be a <see cref="ICharacter"/> or exhibit <see cref="IPlayable"/> behaviour.
	/// 
	/// An entity belongs in <see cref="Model.Game"/>, while the <see cref="Model.Game"/>
	/// itself is also an entity. 
	/// Most entities are owned by <see cref="Entities.Controller"/>, while 
	/// <see cref="Entities.Controller"/> itself is also an entity.
	/// 
	/// .. everything is an entity .. writing this documentation is like describing
	/// the the universe on sub-atomic level!
	/// </summary>
	public interface IEntity : IEnumerable<KeyValuePair<EGameTag, int>>
	{
		/// <summary>Gets the identifier of this entity (EntityID).</summary>
		/// <value>The identifier.</value>
		int Id { get; }

		/// <summary>Gets the ranking order of the moment this entity was played.</summary>
		/// <value>The ranking order.</value>
		int OrderOfPlay { get; }

		/// <summary>Gets or sets the game instance from which this entity is part of.</summary>
		/// <value>The game instance.</value>
		Game Game { get; set; }

		/// <summary>Gets the card from which this entity was derived from.</summary>
		/// <value>The card object.</value>
		Card Card { get; }

		/// <summary>Gets or sets the owner of this entity, the controller who played the entity.</summary>
		/// <value>The controller/owner object.</value>
		Controller Controller { get; set; }

		/// <summary>Gets or sets the zone in which the entity exists.</summary>
		/// <value>The zone, <see cref="IZone"/>.</value>
		/// <autogeneratedoc />
		IZone Zone { get; set; }

		/// <summary>Gets or sets the specific <see cref="EGameTag"/> for this entity.</summary>
		/// <value><see cref="Int32"/>.</value>
		/// <param name="t">The gametag which represents a property of this entity.</param>
		/// <returns></returns>
		int this[EGameTag t] { get; set; }

		/// <summary>Resets all tags (properties) to default values derived from the orginal card object.</summary>
		void Reset();

		/// <summary>Copy details from the other entity into into this object.</summary>
		/// <param name="entity">The entity.</param>
		void Stamp(Entity entity);

		/// <summary>Get a string which uniquely defines this entity object.</summary>
		/// <param name="ignore">All tags to ignore when generating the hash.</param>
		/// <returns></returns>
		string Hash(params EGameTag[] ignore);

		/// <summary>Get all enchantments hooked onto this entity.</summary>
		/// <value>The enchantments. Enchantments force a temporary effect, for as long as this entity is in play, onto the game.</value>
		IList<Enchant> Enchants { get; }

		/// <summary>Gets all triggers hooked onto this entity.</summary>
		/// <value>The triggers. Triggers execute a certain effect when the requirements are met.</value>
		/// <autogeneratedoc />
		IList<Trigger> Triggers { get; }
	}
}
