using SabberStoneCore.Enums;
using SabberStoneCore.Kettle;
using SabberStoneCore.Model.Zones;
using System.Collections.Generic;
using System.Text;

namespace SabberStoneCore.Model.Entities.Playables
{
	/// <summary>
	/// The character representing the controller/player.
	/// The hero entity is built from <see cref="ECardType.HERO"/> <see cref="Card"/>s.
	/// The exact hero that can represent the player depends on the <see cref="ECardClass"/>
	/// of the <see cref="DeckZone"/> of the controller.
	/// </summary>
	/// <seealso cref="Character{Hero}" />
	public sealed class Hero : Character<Hero>
	{
		#region TAG_SHORTCUTS

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		public int SpellPowerDamage
		{
			get { return this[EGameTag.SPELLPOWER]; }
			set { this[EGameTag.SPELLPOWER] = value; }
		}

		public int EquippedWeapon
		{
			get { return this[EGameTag.WEAPON]; }
			set { this[EGameTag.WEAPON] = value; }
		}

		public int HeroPowerDamage
		{
			get { return this[EGameTag.HEROPOWER_DAMAGE]; }
			set { this[EGameTag.HEROPOWER_DAMAGE] = value; }
		}

		public int Fatigue
		{
			get { return this[EGameTag.FATIGUE]; }
			set { this[EGameTag.FATIGUE] = value; }
		}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

		#endregion

		#region PROPERTIES

		/// <summary>Gets or sets the hero power entity.</summary>
		/// <value><see cref="HeroPower"/></value>
		/// <autogeneratedoc />
		public HeroPower Power { get; set; }

		/// <summary>Gets or sets the weapon entity.</summary>
		/// <value><see cref="Playables.Weapon"/></value>
		/// <autogeneratedoc />
		public Weapon Weapon { get; set; }

		/// <summary>Gets the total attack damage of this hero.</summary>
		/// <value>The total attack damage.</value>
		public int TotalAttackDamage => AttackDamage + (Weapon?.AttackDamage ?? 0);

		/// <summary>Gets a value indicating whether this hero can attack.</summary>
		/// <value><c>true</c> if this hero can attack; otherwise, <c>false</c>.</value>
		public override bool CanAttack => TotalAttackDamage > 0 && base.CanAttack;

		/// <summary>Gets a value indicating whether this hero has windfury.</summary>
		/// <value><c>true</c> if this hero has windfury; otherwise, <c>false</c>.</value>
		public override bool HasWindfury => base.HasWindfury || (Weapon != null && Weapon.HasWindfury);

		#endregion

		/// <summary>Initializes a new instance of the <see cref="Hero"/> class.</summary>
		/// <param name="controller">Owner of the hero; not specifically limited to players.</param>
		/// <param name="card">The card which this hero embodies.</param>
		/// <param name="tags">Properties of this entity.</param>
		/// <autogeneratedoc />
		public Hero(Controller controller, Card card, Dictionary<EGameTag, int> tags)
			: base(controller, card, tags)
		{
			Game.Log(ELogLevel.VERBOSE, EBlockType.PLAY, "Hero", $"{card.Name} ({card.Class}) was created.");
		}

		/// <summary>Registers the provided weapon entity as active weapon.</summary>
		/// <param name="weapon"><see cref="Playables.Weapon"/></param>
		public void AddWeapon(Weapon weapon)
		{
			RemoveWeapon();
			Weapon = weapon;
			Weapon[EGameTag.ZONE] = (int)EZone.PLAY;
			Weapon[EGameTag.ZONE_POSITION] = 0;
			if (Game.HistoryEnabled)
			{
				Game.PowerHistory.Add(PowerHistoryBuilder.BlockStart(EBlockType.POWER, Weapon.Id, "", -1, 0));
				Game.PowerHistory.Add(PowerHistoryBuilder.BlockEnd());
			}
			EquippedWeapon = weapon.Id;
		}

		/// <summary>Removes the active weapon from this hero.</summary>
		public void RemoveWeapon()
		{
			if (Weapon == null)
			{
				return;
			}

			if (Weapon.HasDeathrattle)
			{
				Weapon.ApplyEnchantments(EEnchantmentActivation.DEATHRATTLE, Enums.EZone.GRAVEYARD);
			}
			Game.Log(ELogLevel.INFO, EBlockType.PLAY, "Hero", $"Butcher's knife incoming to graveyard, say 'gugus' to {Weapon}");
			Controller.Graveyard.Add(Weapon);
			Weapon = null;
			EquippedWeapon = 0;
		}

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		public string FullPrint()
		{
			var str = new StringBuilder();
			string mStr = Weapon != null ? $"[{Weapon.Card.Name}[{Weapon.AttackDamage}/{Weapon.Durability}]]" : "[NO WEAPON]";
			str.Append($"[HERO][{this}][ATK{AttackDamage}/AR{Armor}/HP{Health}][{mStr}][SP{SpellPowerDamage}]");
			str.Append($"[ENCH {Enchants.Count}]");
			str.Append($"[TRIG {Triggers.Count}]");
			return str.ToString();
		}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
	}
}