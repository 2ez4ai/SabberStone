using SabberStoneCore.Exceptions;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SabberStoneCore.Collections
{
	/// <summary>
	/// Simple ordered set for small amount of elements.
	/// </summary>
	/// <typeparam name="T"></typeparam>
	/// <seealso cref="SabberStoneCore.Collections.IReadOnlyOrderedSet{T}" />
	/// <autogeneratedoc />
	internal class LightWeightOrderedSet<T> : IReadOnlyOrderedSet<T>
	{
		/// <summary>An instance of LightWeightOrderedSet without any elements.</summary>
		/// <autogeneratedoc />
		public static readonly LightWeightOrderedSet<T> Empty = BuildEmpty();

		/// <summary>Contains the set items.</summary>
		private readonly T[] _internalContainer;

		/// <summary>The comparer function for T.</summary>
		/// <autogeneratedoc />
		private readonly IEqualityComparer<T> _comparer;

		T IReadOnlyList<T>.this[int index] => _internalContainer[index];

		int IReadOnlyCollection<T>.Count => _internalContainer.Length;

		bool IReadOnlySet<T>.Contains(T item)
		{
			for (int i = 0; i < _internalContainer.Length; ++i)
			{
				if (_comparer.Equals(_internalContainer[i], item))
				{
					return true;
				}
			}

			return false;
		}

		IEnumerator<T> IEnumerable<T>.GetEnumerator()
		{
			return ((IEnumerable<T>)_internalContainer).GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return _internalContainer.GetEnumerator();
		}

		private static IEqualityComparer<T> GetDefaultComparer()
		{
			return EqualityComparer<T>.Default;
		}

		private LightWeightOrderedSet(T[] container, IEqualityComparer<T> comparer)
		{
			_internalContainer = container;
			_comparer = comparer ?? GetDefaultComparer();
		}

		/// <summary>Builds a lightweight (ReadOnly) OrderedSet from the provided data.</summary>
		/// <param name="data">The data.</param>
		/// <param name="comparer">The comparer.</param>
		/// <param name="throwOnConstraintViolation">If true throws an error if the unique item constraint is violated.</param>
		/// <returns></returns>
		/// <exception cref="System.ArgumentNullException">data is null!</exception>
		public static LightWeightOrderedSet<T> Build(IEnumerable<T> data, IEqualityComparer<T> comparer = null, bool throwOnConstraintViolation = true)
		{
			if (data == null) throw new ArgumentNullException("data is null!");
			// Filter out all double values from enumerable.
			IEnumerable<T> filtered = data.Distinct();
			T[] filteredContainer = filtered.ToArray();

			if (throwOnConstraintViolation)
			{
				if(data.Count() != filteredContainer.Length)
				{
					throw new ConstraintViolationException("Duplicate items detected!");
				}
			}

			// Build and return object.
			return new LightWeightOrderedSet<T>(filteredContainer, comparer);
		}

		/// <summary>Builds a lightweight (ReadOnly) OrderedSet without any data.</summary>
		/// <returns></returns>
		/// <autogeneratedoc />
		private static LightWeightOrderedSet<T> BuildEmpty()
		{
			return new LightWeightOrderedSet<T>(new T[0] { }, null);
		}

		void IReadOnlySet<T>.ForEach(Action<T> lambda)
		{
			for (int i = 0; i < _internalContainer.Length; ++i)
			{
				lambda(_internalContainer[i]);
			}
		}

		bool IReadOnlySet<T>.Exists(Func<T, bool> lambda)
		{
			for (int i = 0; i < _internalContainer.Length; ++i)
			{
				if (lambda(_internalContainer[i]))
				{
					return true;
				}
			}

			return false;
		}

		IOrderedEnumerable<T> IOrderedEnumerable<T>.CreateOrderedEnumerable<TKey>(Func<T, TKey> keySelector, IComparer<TKey> comparer, bool descending)
		{
			if (descending)
			{
				return _internalContainer.OrderByDescending(keySelector, comparer);
			}
			else
			{
				return _internalContainer.OrderBy(keySelector, comparer);
			}
		}		
	}
}
