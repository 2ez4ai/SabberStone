using SabberStoneCore.Enums;
using SabberStoneCore.Exceptions;
using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using SabberStoneCore.Model.Entities;

namespace SabberStoneCore.Model.Zones
{
	/// <summary>
	/// Builds and holds zones which are owned by the specified <see cref="Model.Controller"/>.
	/// </summary>
	/// <seealso cref="System.Collections.Generic.IEnumerable{SabberStoneCore.Model.Zones.IZone}" />
	public class ControlledZones : IEnumerable<IZone>
	{
		/// <summary>Gets the game for which the zones are valid.</summary>
		/// <value><see cref="Model.Game"/></value>
		public Game Game { get; }

		/// <summary>Gets the controller who owns the zones.</summary>
		/// <value><see cref="Model.Controller"/></value>
		public Controller Controller { get; }

		/// <summary>The zones built for the controller.
		/// This array can contain null values!
		/// </summary>
		private readonly IZone[] _zones = new IZone[Enum.GetNames(typeof(EZone)).Length];

		/// <summary>Gets the <see cref="IZone"/> object for the specified <see cref="EZone"/> value.
		/// This property can return null values!
		/// </summary>
		/// <value>The <see cref="IZone"/>.</value>
		/// <param name="zone">The zone.</param>
		/// <returns></returns>
		public IZone this[EZone zone] => _zones[(int)zone];

		/// <summary>Initializes a new instance of the <see cref="ControlledZones"/> class.</summary>
		/// <param name="game">The game.</param>
		/// <param name="controller">The controller.</param>
		/// <autogeneratedoc />
		public ControlledZones(Game game, Controller controller)
		{
			Game = game;
			Controller = controller;

			BuildZones();
		}

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		private void BuildZones()
		{
			foreach (object zoneObj in Enum.GetValues(typeof(EZone)))
			{
				// Convert zoneObj back into enum value.
				var zone = (EZone)zoneObj;

				// Switch known types. 
				// Any enum value added to EZone without specifying a new case over 
				// here will fail tests hard!
				IZone result = null;
				switch (zone)
				{
					case EZone.INVALID:
						result = null;
						break;
					case EZone.GRAVEYARD:
						result = new GraveyardZone(Game, Controller, zone);
						break;
					case EZone.PLAY:
						result = new BoardZone(Game, Controller, zone);
						break;
					case EZone.DECK:
						result = new DeckZone(Game, Controller);
						break;
					case EZone.HAND:
						result = new HandZone(Game, Controller);
						break;
					case EZone.REMOVEDFROMGAME:
						result = null;
						break;
					case EZone.SETASIDE:
						result = new SetasideZone(Game, Controller, zone);
						break;
					case EZone.SECRET:
						result = new SecretZone(Game, Controller, zone);
						break;
					default:
						throw new ZoneException("No such zone type when creating zone: " + zone);
				}

				_zones[(int)zone] = result;
			}
		}

		public void Stamp(ControlledZones zones)
		{
			foreach (EZone value in Enum.GetValues(typeof(EZone)))
			{
				if (value == EZone.INVALID)
					continue;

				IZone zone = zones[value];
				if (zone != null)
					this[value].Stamp(zone);
			}
		}

		public string Hash(params EGameTag[] ignore)
		{
			var str = new StringBuilder();
			foreach (IZone zone in _zones)
			{
				if (zone != null)
					str.Append(zone.Hash(ignore));
			}
			return str.ToString();
		}

		public IEnumerator<IZone> GetEnumerator()
		{
			return ((IEnumerable<IZone>)_zones).GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return ((IEnumerable<IZone>)_zones).GetEnumerator();
		}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
	}
}