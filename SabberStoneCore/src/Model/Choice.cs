using SabberStoneCore.Collections;
using SabberStoneCore.Enums;
using System;
using System.Collections.Generic;
using System.Text;

namespace SabberStoneCore.Model
{
	/// <summary>
	/// Specifies the consequences of a made choice.
	/// </summary>
	public enum ChoiceAction
	{
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		ADAPT,
		HAND,
		SUMMON,
		HEROPOWER,
		KAZAKUS,
		TRACKING,
		INVALID,

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
	}

	/// <summary>
	/// Embodies a choice the specified controller made.
	/// </summary>
	public class Choice
	{
		/// <summary>The player who made the choice.</summary>
		public readonly Controller Controller;

		/// <summary>Gets or sets the type of the choice.</summary>
		/// <value><see cref="Enums.ChoiceType"/></value>
		public ChoiceType ChoiceType { get; set; } = ChoiceType.INVALID;

		/// <summary>Gets or sets the action linked to the made choice.</summary>
		/// <value>The choice action.</value>
		public ChoiceAction ChoiceAction { get; set; } = ChoiceAction.INVALID;

		/// <summary>Gets or sets the set of possible choices, entity ID's.</summary>
		/// <value>The set of entity ID's, in a choice set it's not possible to have two options at the same time.</value>
		public IReadOnlyOrderedSet<int> Choices { get; set; }

		/// <summary>Gets or sets the entity ID that triggered the choice to be made.</summary>
		/// <value>The Entity ID.</value>
		public int SourceId { get; set; }

		/// <summary>Gets or sets the SET of chosen entities.</summary>
		/// <value>List of Entity ID's.</value>
		public IReadOnlyOrderedSet<int> TargetIds { get; set; }

		/// <summary>Initializes a new instance of the <see cref="Choice"/> class.</summary>
		/// <param name="controller">The controller.</param>
		public Choice(Controller controller)
		{
			Controller = controller;
		}

		/// <summary>Copies information from the provided object into this one.</summary>
		/// <param name="choice">The choice object to copy from.</param>
		public void Stamp(Choice choice)
		{
			ChoiceType = choice.ChoiceType;
			ChoiceAction = choice.ChoiceAction;
			Choices = LightWeightOrderedSet<int>.Build(choice.Choices);
			SourceId = choice.SourceId;
			TargetIds = LightWeightOrderedSet<int>.Build(choice.TargetIds);
		}

		/// <summary>Builds a string with all information contained by this object.</summary>
		/// <returns>A string representing this object.</returns>
		/// <autogeneratedoc />
		public string FullPrint()
		{
			var str = new StringBuilder();
			str.Append($"{Controller.Name}[ChoiceType:{ChoiceType}][ChoiceAction:{ChoiceAction}][");
			str.Append(String.Join(",", Choices));
			return str.ToString();
		}
	}
}