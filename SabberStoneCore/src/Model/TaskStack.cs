using SabberStoneCore.Model.Entities;
using SabberStoneCore.Tasks;
using System.Collections.Generic;
using System.Linq;

namespace SabberStoneCore.Model
{
	/// <summary>
	/// Class used to provide context for <see cref="ISimpleTask"/>.
	/// These tasks are generated with parameters. When such a task is executed
	/// the parameters are replaced by arguments provided by this class.
	/// </summary>
	public class TaskStack
	{
		/// <summary>Gets the game which contains this object.</summary>
		/// <value><see cref="Model.Game"/></value>
		public Game Game { get; }

		/// <summary>Gets or sets a list of playable entities.</summary>
		/// <value><see cref="IPlayable"/></value>
		public List<IPlayable> Playables { get; set; }

		/// <summary>Gets or sets the list of card ids.</summary>
		/// <value>Card id strings.</value>
		public List<string> CardIds { get; set; }

		/// <summary>Gets or sets the flag, which has no specific meaning.
		/// This property can be used to quickly turn behaviour on or off.
		/// </summary>
		/// <value><c>true</c> if flag is set to true; otherwise, <c>false</c>.</value>
		public bool Flag { get; set; }

		/// <summary>Gets or sets the array of numbers. These numbers have no specific
		/// meaning. Each element of this array behave like CPU registers.
		/// </summary>
		/// <value>The numbers.</value>
		public int[] Numbers { get; set; } = new[] { 0, 0, 0, 0, 0 };

		/// <summary>Initializes a new instance of the <see cref="TaskStack"/> class.</summary>
		/// <param name="game">The game.</param>
		/// <autogeneratedoc />
		public TaskStack(Game game)
		{
			Game = game;
		}

		/// <summary>Resets the stack. All values are set to their default.</summary>
		public void Reset()
		{
			Playables = new List<IPlayable>();
			CardIds = new List<string>();
			Flag = false;
			Numbers = new[] { 0, 0, 0, 0, 0 };
		}

		/// <summary>Copies internal data from the given object into this one.</summary>
		/// <param name="other">The other stack instance.</param>
		public void Stamp(TaskStack other)
		{
			Playables = new List<IPlayable>();
			Playables = other.Playables?.Select(p => Game.Entities[p.Id]).ToList();
			CardIds = other.CardIds;
			Flag = other.Flag;
			Numbers = other.Numbers;
		}
	}
}