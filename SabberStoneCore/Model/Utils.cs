using System;
using System.Collections.Generic;
using System.Linq;

namespace SabberStoneCore.Model
{
	/// <summary>
	/// Provides helper methods for often used functionality.
	/// </summary>
	public class Util
    {
		/// <summary>The source of randomness.</summary>
		public static Random Random = new Random();

		/// <summary>Returns a random element from the specified list.</summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="e">The e.</param>
		/// <returns></returns>
		/// <autogeneratedoc />
		public static T RandomElement<T>(IEnumerable<T> e)
            => e.ElementAt(Random.Next(0, e.Count()));

		/// <summary>Chooses a random element from the specified list. <seealso cref="RandomElement{T}(IEnumerable{T})"/></summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="list">The list.</param>
		/// <returns></returns>
		/// <autogeneratedoc />
		public static T Choose<T>(IReadOnlyList<T> list) => RandomElement(list);

		/// <summary>Gets the power set, a set of any subset of the provided set.. including the empty set and itself.</summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="list">The set of elements.</param>
		/// <returns></returns>
		/// <autogeneratedoc />
		public static IEnumerable<IEnumerable<T>> GetPowerSet<T>(List<T> list)
            => Enumerable.Range(0, 1 << list.Count)
                .Select(m => (from i in Enumerable.Range(0, list.Count)
                              where (m & (1 << i)) != 0 select list[i]));

		/// <summary>Returns all possible discover subsets of all cards. The invariant is that each discover subset
		/// contains exactly 3 cards.</summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="list">The set of elements.</param>
		/// <returns></returns>
		public static IEnumerable<IEnumerable<T>> GetDiscoverSets<T>(List<T> list)
        {
            var result = new List<IEnumerable<T>>();
            for (var i = 0; i < list.Count-2; i++)
            {
                var eleA = list[i];
                for (var j = i + 1; j < list.Count-1; j++)
                {
                    var eleB = list[j];
                    for (var k = j + 1; k < list.Count; k++)
                    {
                        result.Add(new[] {eleA, eleB, list[k] });
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// This can be used for caching values ... ex. scoring
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="getValue"></param>
        /// <returns></returns>
        public static Func<T> Remember<T>(Func<T> getValue)
        {
            var isCached = false;
            var cachedResult = default(T);

            return () =>
            {
                if (isCached) return cachedResult;
                cachedResult = getValue();
                isCached = true;
                return cachedResult;
            };
        }

    }
}
