using System.Linq;
using SabberStoneCore.Enums;
using System.Collections.Generic;
using SabberStoneCore.Collections;

namespace SabberStoneCore.Model
{
	/// <summary>
	/// Deck zone. This zone holds all cards for one player at game creation.
	/// </summary>
	/// <seealso cref="SabberStoneCore.Model.Zone{SabberStoneCore.Model.IPlayable}" />
	public class Deck : Zone<IPlayable>
    {
		/// <summary>Gets or sets the amount of cards that exist in this deck at game start.</summary>
		/// <value>The amount of starting cards.</value>
		public int StartingCards { get; set; } = 30;

		/// <summary>Creates a new deck instance.</summary>
		/// <param name="game">The game to which this zone is attached.</param>
		/// <param name="controller">The controller which owns this zone.</param>
		/// <autogeneratedoc />
		public Deck(Game game, Controller controller) : base(game, controller, EZone.DECK)
        {
        }

		/// <summary>Fills this deck with cards until <see cref="StartingCards"/> limit is reached.
		/// This method only adds cards valid for the current game setup.
		/// </summary>
		public void Fill()
        {
			IReadOnlySet<Card> cards = Game.FormatType == EFormatType.FT_STANDARD ? Controller.Standard : Controller.Wild;
            var cardsToAdd = StartingCards - Count;

            Game.Log(ELogLevel.INFO, EBlockType.PLAY, "Deck", $"Deck[{Game.FormatType}] from {Controller.Name} filling up with {cardsToAdd} random cards.");
            while (cardsToAdd > 0)
            {
                var card = Util.Choose(cards);
                if (this.Count(c => c.Card == card) >= card.MaxAllowedInDeck)
                    continue;
                Entity.FromCard(Controller, card, null, this);
                cardsToAdd--;
            }
        }

		/// <summary>Shuffles this deck.</summary>
		/// <param name="times">The amount of times a card is swapped (in position) with another card.</param>
		public void Shuffle(int times = 100)
        {
            // no need to shuffle when ther is one or zero entities ...
            if (Count < 2)
            {
                return;
            }

            Game.Log(ELogLevel.INFO, EBlockType.PLAY, "Deck", $"Deck[{Game.FormatType}] from {Controller.Name} shuffling ({times}x).");
            for (int i = 0; i < times; i++)
            {
                Swap(Random, Random);
            }
        }
    }
}
