using SabberStoneCore.Enums;
using SabberStoneCore.Model;
using System;
using System.Collections.Generic;

namespace SabberStoneCore.Config
{
	/// <summary>
	/// Holds all configuration values to create a new <see cref="Game"/> instance.
	/// </summary>
	public class GameConfig: IReadOnlyGameConfig
	{
		/// <summary>The default value for <see cref="StartPlayerIdx"/>.
		/// -1 means the game will randomly pick one player as starting player.
		/// </summary>
		public const int START_PLAYER_DEFAULT = -1;

		/// <summary>The default name for players. The token will be replaced
		/// by the player index.
		/// </summary>
		public const string PLAYER_NAME_DEFAULT = "Player{0}";

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		public int StartPlayerIdx { get; set; } = START_PLAYER_DEFAULT;

		public string Player1Name { get; set; } = String.Format(PLAYER_NAME_DEFAULT, 1);

		public string Player2Name { get; set; } = String.Format(PLAYER_NAME_DEFAULT, 2);

		public ECardClass Player1CardClass { get; set; } = ECardClass.INVALID;

		public ECardClass Player2CardClass { get; set; } = ECardClass.INVALID;

		public IReadOnlyList<Card> Player1Deck { get; set; } = null;

		public IReadOnlyList<Card> Player2Deck { get; set; } = null;

		public EFormatType FormatType { get; set; } = EFormatType.FT_UNKNOWN;

		public bool SetupHeroes { get; set; } = true;

		public bool FillDecks { get; set; } = false;

		public bool Shuffle { get; set; } = true;

		public bool Splitting { get; set; } = false;

		public bool Logging { get; set; } = true;

		public bool History { get; set; } = true;

		public bool SkipMulligan { get; set; } = true;

		public int MaxMinionsOnBoard { get; set; } = 7;

		public IReadOnlyGameConfig Clone()
		{
			return (GameConfig)MemberwiseClone();
		}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

		/// <summary>Initializes a new instance of the <see cref="GameConfig"/> class.</summary>
		/// <autogeneratedoc />
		public GameConfig()
		{
		}

		/// <summary>Stamps the specified configuration into a new object.</summary>
		/// <param name="other">The other configuration.</param>
		/// <returns></returns>
		public static GameConfig Stamp(IReadOnlyGameConfig other)
		{
			return new GameConfig()
			{
				StartPlayerIdx = other.StartPlayerIdx,
				Player1Name = other.Player1Name,
				Player1CardClass = other.Player1CardClass,
				Player1Deck = other.Player1Deck,
				Player2Name = other.Player2Name,
				Player2CardClass = other.Player2CardClass,
				Player2Deck = other.Player2Deck,
				FormatType = other.FormatType,
				SetupHeroes = other.SetupHeroes,
				FillDecks = other.FillDecks,
				Shuffle = other.Shuffle,
				Splitting = other.Splitting,
				Logging = other.Logging,
				History = other.History,
				SkipMulligan = other.SkipMulligan,
				MaxMinionsOnBoard = other.MaxMinionsOnBoard
			};
		}
	}
}
