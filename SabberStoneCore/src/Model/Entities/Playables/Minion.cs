using System.Collections.Generic;
using SabberStoneCore.Enums;
using SabberStoneCore.Model.Zones;
using SabberStoneCore.Enchants;

namespace SabberStoneCore.Model.Entities.Playables
{
	/// <summary>
	/// The (character) entity built from <see cref="ECardType.MINION"/> <see cref="Card"/>s.
	/// This object will be stored inside the <see cref="BoardZone"/>
	/// where it will fight 'till death. That's the <see cref="GraveyardZone"/>!
	/// </summary>
	/// <seealso cref="Character{Minion}" />
	public partial class Minion : Character<Minion>
	{

		#region TAG_SHORTCUTS
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		public bool HasCharge
		{
			get { return this[EGameTag.CHARGE] == 1; }
			set { this[EGameTag.CHARGE] = value ? 1 : 0; }
		}

		public bool HasDivineShield
		{
			get { return this[EGameTag.DIVINE_SHIELD] == 1; }
			set { this[EGameTag.DIVINE_SHIELD] = value ? 1 : 0; }
		}

		public bool HasBattleCry
		{
			get { return this[EGameTag.BATTLECRY] != 0; }
			set { this[EGameTag.BATTLECRY] = value ? 1 : 0; }
		}

		public bool HasInspire
		{
			get { return this[EGameTag.INSPIRE] == 1; }
			set { this[EGameTag.INSPIRE] = value ? 1 : 0; }
		}

		public bool HasStealth
		{
			get { return this[EGameTag.STEALTH] == 1; }
			set { this[EGameTag.STEALTH] = value ? 1 : 0; }
		}

		public bool IsEnraged
		{
			get { return this[EGameTag.ENRAGED] == 1; }
			set { this[EGameTag.ENRAGED] = value ? 1 : 0; }
		}

		public bool Freeze
		{
			get { return this[EGameTag.FREEZE] == 1; }
			set { this[EGameTag.FREEZE] = value ? 1 : 0; }
		}

		public bool Poisonous
		{
			get { return this[EGameTag.POISONOUS] == 1; }
			set { this[EGameTag.POISONOUS] = value ? 1 : 0; }
		}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
		#endregion

		#region PROPERTIES
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

		public override bool CanAttack => CheckCanAttack();

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
		#endregion

		/// <summary>Initializes a new instance of the <see cref="Minion"/> class.</summary>
		/// <param name="controller">Owner of the character; not specifically limited to players.</param>
		/// <param name="card">The card which this character embodies.</param>
		/// <param name="tags">Properties of this entity.</param>
		/// <autogeneratedoc />
		public Minion(Controller controller, Card card, Dictionary<EGameTag, int> tags)
			: base(controller, card, tags)
		{
			Game.Log(ELogLevel.VERBOSE, EBlockType.PLAY, "Minion", $"{this} ({Card.Class}) was created.");
		}

		private bool CheckCanAttack()
		{
			// If this minion has charge, we tweak the IsExhausted variable
			// which is used in the base.CanAttack formula.
			if (NumAttacksThisTurn == 0 && HasCharge && IsExhausted)
			{
				IsExhausted = false;
			}

			return (AttackDamage > 0) && base.CanAttack;
		}

		/// <summary>Silences this minion, which disables all attached <see cref="IEntity.Enchants"/>
		/// from this minions.
		/// TODO; Why doesn't it clear enchants explicitly?
		/// </summary>
		public void Silence()
		{
			HasTaunt = false;
			IsFrozen = false;
			IsEnraged = false;
			HasCharge = false;
			HasWindfury = false;
			HasDivineShield = false;
			HasStealth = false;
			HasDeathrattle = false;
			HasBattleCry = false;
			HasInspire = false;

			IsSilenced = true;

			Game.Log(ELogLevel.INFO, EBlockType.PLAY, "Minion", $"{this} got silenced!");
		}
	}
}